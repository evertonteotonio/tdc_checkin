const { bedrock } = require('../config/aws');

class LLMService {
  constructor() {
    this.modelId = process.env.BEDROCK_MODEL_ID || 'anthropic.claude-3-sonnet-20240229-v1:0';
  }

  async generateGreeting(participant) {
    try {
      const prompt = this.buildGreetingPrompt(participant);
      const response = await this.invokeBedrock(prompt);
      
      return {
        greeting: response.greeting || `Ol√° ${participant.name}! Bem-vindo ao evento! üéâ`,
        tip: response.tip || "N√£o esque√ßa de conferir a agenda no app!",
        participantType: participant.type,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error('Error generating greeting:', error);
      // Sempre usar fallback em caso de erro (sem falhar o check-in)
      console.log('Using fallback greeting for participant:', participant.name);
      return this.mockGreeting(participant);
    }
  }

  async generateAssistance(query, participant) {
    try {
      const prompt = this.buildAssistancePrompt(query, participant);
      const response = await this.invokeBedrock(prompt);
      
      return response.response || this.mockAssistance(query, participant);
    } catch (error) {
      console.error('Error generating assistance:', error);
      // Sempre usar fallback em caso de erro
      console.log('Using fallback assistance for query:', query);
      return this.mockAssistance(query, participant);
    }
  }

  async invokeBedrock(prompt) {
    try {
      const payload = {
        anthropic_version: "bedrock-2023-05-31",
        max_tokens: 300,
        messages: [
          {
            role: "user",
            content: prompt
          }
        ]
      };

      const response = await bedrock.invokeModel({
        modelId: this.modelId,
        contentType: 'application/json',
        accept: 'application/json',
        body: JSON.stringify(payload)
      }).promise();

      const responseBody = JSON.parse(response.body.toString());
      const content = responseBody.content[0].text;

      // Tentar parsear como JSON, sen√£o retornar texto simples
      try {
        return JSON.parse(content);
      } catch {
        return { response: content, greeting: content };
      }
    } catch (error) {
      console.error('Bedrock invocation error:', error);
      throw error;
    }
  }

  buildGreetingPrompt(participant) {
    return `Voc√™ √© um assistente de eventos amig√°vel. Crie uma sauda√ß√£o personalizada para o participante.

Dados do participante:
- Nome: ${participant.name}
- Empresa: ${participant.company}
- Tipo: ${participant.type}

Responda em JSON com:
{
  "greeting": "sauda√ß√£o calorosa e personalizada",
  "tip": "dica √∫til sobre o evento"
}

Seja caloroso, profissional e inclua emojis apropriados.`;
  }

  buildAssistancePrompt(query, participant) {
    return `Voc√™ √© um assistente de eventos. Responda √† pergunta do participante de forma √∫til e amig√°vel.

Participante: ${participant.name} (${participant.type})
Pergunta: ${query}

Informa√ß√µes do evento:
- WiFi: "EventoTech" / senha: "TechEvent2024"
- Agenda: Keynote 9h, Tech Talks 14h, Networking 17h
- Localiza√ß√£o: 3 andares - T√©rreo (recep√ß√£o), 1¬∫ andar (workshops), 2¬∫ andar (audit√≥rio principal)

Responda em JSON:
{
  "response": "resposta √∫til e amig√°vel"
}`;
  }

  // Fallback methods
  mockGreeting(participant) {
    const greetings = [
      `Ol√° ${participant.name}! Bem-vindo ao evento! üéâ`,
      `Oi ${participant.name}! Que bom te ver aqui! ‚ú®`,
      `Bem-vindo ${participant.name}! O evento est√° incr√≠vel hoje! üöÄ`,
      `Ol√° ${participant.name}! Esperamos que aproveite muito o evento! üéØ`
    ];

    const tips = [
      "N√£o esque√ßa de conferir a agenda no app!",
      "O coffee break ser√° √†s 15h no hall principal.",
      "H√° uma √°rea de networking no 2¬∫ andar.",
      "As palestras principais s√£o no audit√≥rio central."
    ];

    const greeting = greetings[Math.floor(Math.random() * greetings.length)];
    const tip = tips[Math.floor(Math.random() * tips.length)];

    return {
      greeting,
      tip,
      participantType: participant.type,
      timestamp: new Date().toISOString()
    };
  }

  mockAssistance(query, participant) {
    const responses = {
      'agenda': `Ol√° ${participant.name}! A agenda completa est√° dispon√≠vel no app. As principais palestras s√£o: Keynote √†s 9h, Tech Talks √†s 14h, e Networking √†s 17h.`,
      'localiza√ß√£o': `O evento acontece em 3 andares: T√©rreo (recep√ß√£o e coffee), 1¬∫ andar (salas de workshop), 2¬∫ andar (audit√≥rio principal e networking).`,
      'wifi': `A rede WiFi √© "EventoTech" e a senha √© "TechEvent2024". H√° tamb√©m pontos de carregamento em todos os andares.`,
      'default': `Ol√° ${participant.name}! Como posso ajud√°-lo hoje? Posso fornecer informa√ß√µes sobre agenda, localiza√ß√£o, WiFi ou outras d√∫vidas sobre o evento.`
    };

    const lowerQuery = query.toLowerCase();
    
    if (lowerQuery.includes('agenda') || lowerQuery.includes('programa√ß√£o')) {
      return responses.agenda;
    } else if (lowerQuery.includes('onde') || lowerQuery.includes('localiza√ß√£o') || lowerQuery.includes('local')) {
      return responses.localiza√ß√£o;
    } else if (lowerQuery.includes('wifi') || lowerQuery.includes('internet')) {
      return responses.wifi;
    }
    
    return responses.default;
  }
}

module.exports = new LLMService();
